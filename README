This is the modified gem5-simulator for my paper Speculative Code Compaction: Eliminating Dead Code via Speculative Microcode Transformations, published at MICRO 2022.
The main gem5 website can be found at http://www.gem5.org

Paper:
<Awaiting camera-ready>

Dependencies:
g++ (we used gcc 4.8.5 for building gem5 and the latest llvm for compiling benchmarks)
Python (we used 2.7.5)
SCons (we used 3.1.2)
SWIG (we used 2.0.10)
zlib (we used 1.2.7)
m4 (we used 1.4.16)
SPEC and PARSEC benchmark suites

We provide scripts to reproduce the main results of our paper for the SPEC benchmark suite, namely:
   - Figure 6 (Top): Executed Microop Count for both "Baseline" and "Speculative Code Compaction"
   - Figure 6 (Middle): Speedup for both "Baseline" and "Speculative Code Compaction"
   - Figure 8: Energy Consumption for both "Baseline" and "Speculative Code Compaction"

The scripts required for reproducing the above results can be found in artifact_evaluation/
Please refer to artifact_evaluation/README-Fig6 for further instructions.

The authors are dedicated to facilitating easy reproduction of all results in the paper therefore if you run into any issues generating the listed results or would like to reproduce additional results in the paper, please reach out to me: Logan Moody (lgm4xn@virginia.edu) 
